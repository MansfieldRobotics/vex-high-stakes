# ---------------------------------------------------------------------------- #
#                                                                              #
#   Module:       main.py                                                      #
#   Author:       MHS Robotics Team                                            #
#   Created:      11/15/2024, 2:23:12 PM                                       #
#   Description:  V5 project                                                   #
#                                                                              #
# ---------------------------------------------------------------------------- #
from vex import *
from vex import Optical


flip = False


# Brain should be defined by default
brain = Brain()
lMotor1 = Motor(Ports.PORT11, GearSetting.RATIO_36_1, flip)
rMotor1 = Motor(Ports.PORT6, GearSetting.RATIO_36_1, not flip)
lMotor2 = Motor(Ports.PORT13, GearSetting.RATIO_36_1, flip)
rMotor2 = Motor(Ports.PORT10, GearSetting.RATIO_36_1, not flip)
lMotor = MotorGroup(lMotor1,lMotor2)
rMotor = MotorGroup(rMotor1,rMotor2)
bMotor = Motor(Ports.PORT13)
dTrain = DriveTrain(lMotor, rMotor, wheelTravel=300, trackWidth=300, wheelBase=170, units=INCHES)
cont = Controller()


previous_stateTyrell = False










# Initialize inertial sensor
inertial = Inertial(Ports.PORT6)  # Make sure to use the correct port
inertial.calibrate()
wait(2, SECONDS)  # Allow time for calibration




def apply_deadband(value, threshold=5):
  if abs(value) < threshold:
      return 0
  return value






def square_input(value):
  return value * value if value > 0 else -(value * value)




def PIDMath(error, lasterror, kp=1.0, ki=0.0, kd=0.0):
  # PID math function that we use for PID control
  Proportional = error * kp  # Proportional value
  Integral = (error + lasterror) * ki  # Integral math
  Derivative = (error - lasterror) * kd  # Derivative Math
  PID = Proportional + Integral + Derivative  # Final PID value calculation
  return PID  # return the final value






def calculate_motor_velocities(forward_velocity, turn_velocity, lasterror_l, lasterror_r, kp=0.05, ki=0.5, kd=0.05):
  # Calculate target velocities
  target_velocity_l = forward_velocity - turn_velocity
  target_velocity_r = forward_velocity + turn_velocity


  # Read actual velocities
  actual_velocity_l = lMotor.velocity(PERCENT)
  actual_velocity_r = rMotor.velocity(PERCENT)


  # Calculate errors
  error_l = target_velocity_l - actual_velocity_l
  error_r = target_velocity_r - actual_velocity_r


  # Calculate PID outputs
  PID_output_l = PIDMath(error_l, lasterror_l, kp, ki, kd)
  PID_output_r = PIDMath(error_r, lasterror_r, kp, ki, kd)


  # Update last errors
  lasterror_l = error_l
  lasterror_r = error_r


  # Apply deadband after PID calculation
  final_velocity_l = apply_deadband(target_velocity_l + PID_output_l)
  final_velocity_r = apply_deadband(target_velocity_r + PID_output_r)


  return final_velocity_l, final_velocity_r, lasterror_l, lasterror_r


def userDrive():


    # Forward and backward movement with axis 4
    forward_velocity = apply_deadband(square_input(cont.axis3.position()))
    # Turning movement with axis 3
    turn_velocity = apply_deadband(square_input(cont.axis1.position()))


    global previous_stateTyrell
    global flip
    # Get the current state
    current_stateTyrell = cont.buttonR1.pressing()
    # Check if the state has changed
    if current_stateTyrell != previous_stateTyrell:
        if current_stateTyrell:
            flip = not flip
   
        # Update the previous state
        previous_stateTyrell = current_stateTyrell


   
    if flip:
        #turn_velocity = - turn_velocity
        forward_velocity = - forward_velocity




    lasterror_l = 0
    lasterror_r = 0


    # Calculate motor velocities
    final_velocity_l, final_velocity_r, lasterror_l, lasterror_r = calculate_motor_velocities(forward_velocity, turn_velocity, lasterror_l, lasterror_r, .75, .1, .1)


    # Set motor velocities
    lMotor.set_velocity(final_velocity_l, PERCENT)
    rMotor.set_velocity(final_velocity_r, PERCENT)


    # Spin motors
    lMotor.spin(FORWARD)
    rMotor.spin(FORWARD)






def pre_autonomous():
    # actions to do when the program starts
    brain.screen.clear_screen()
    brain.screen.print("pre auton code")
    wait(1, SECONDS)


def autonomous():
    brain.screen.clear_screen()
    brain.screen.print("autonomous code")
    # place automonous code here


def user_control():
    brain.screen.clear_screen()
    # place driver control in this while loop
    while True:
        userDrive()


        wait(10, MSEC)


# create competition instance
comp = Competition(user_control, autonomous)
pre_autonomous()



